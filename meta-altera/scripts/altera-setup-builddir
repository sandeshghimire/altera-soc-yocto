#!/bin/sh

# OE Build Environment Setup Script
#
# Copyright (C) 2006-2011 Linux Foundation
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

GCC_VERSION=4.7
GCC_RELEASE_YYYY_MM=2013.03
GCC_RELEASE=${GCC_RELEASE_YYYY_MM}-20130313
GCC_BASENAME=gcc-linaro-arm-linux-gnueabihf-${GCC_VERSION}-${GCC_RELEASE}_linux
GCC_ARCHIVE=${GCC_BASENAME}.tar.bz2

function download_toolchain() {
	wget https://launchpad.net/linaro-toolchain-binaries/trunk/${GCC_RELEASE_YYYY_MM}/+download/$GCC_ARCHIVE
	DOWNLOAD_STATUS=$?

	if [ $DOWNLOAD_STATUS -ne 0 ]; then
		echo "Failed to download toolchain"
	fi

	case "$DOWNLOAD_STATUS" in
	"1")
		echo "General failure when download toolchain"
		;;
	"2")
		echo "Parse error when downloading toolchain"
		;;
	"3")
		echo "File I/O error when downloading toolchain"
		;;
	"4")
		echo "Network failure when downloading toolchain"
		;;
	"5")
		echo "SSL verfication failure when downloading toolchain"
		;;
	"6")
		echo "Username/password authentication failure when downloading toolchain"
		;;
	"7")
		echo "Protocol error when downloading toolchain"
		;;
	"8")
		echo "Server issued an error response when downloading toolchain"
		;;
	esac

	if [ $DOWNLOAD_STATUS -ne 0 ]; then
		exit -1
	fi
}

if [ -z "$BUILDDIR" ]; then
    echo >&2 "Error: The build directory (BUILDDIR) must be set!"
    exit 1
fi

mkdir -p $BUILDDIR/conf
cp $OEROOT/meta-altera/scripts/env.sh $BUILDDIR/env.sh
echo "OEROOT=$OEROOT"
sed -i "s^__OEROOT__^$OEROOT^" $BUILDDIR/env.sh

chmod a+x $BUILDDIR/env.sh

if ! (test -d "$BUILDDIR"); then
    echo >&2 "Error: The builddir ($BUILDDIR) does not exist!"
    exit 1
fi

if ! (test -w "$BUILDDIR"); then
    echo >&2 "Error: Cannot write to $BUILDDIR, perhaps try sourcing with a writable path? i.e. . oe-init-build-env ~/my-build"
    exit 1
fi

cd "$BUILDDIR"

TEMPLATECONF=${TEMPLATECONF:-meta-altera/conf}

# 
# $TEMPLATECONF can point to a directory for the template local.conf & bblayers.conf
#
if [ "x" != "x$TEMPLATECONF" ]; then
    if ! (test -d "$TEMPLATECONF"); then
	# Allow TEMPLATECONF=meta-xyz/conf as a shortcut
	if [ -d "$OEROOT/$TEMPLATECONF" ]; then
	    TEMPLATECONF="$OEROOT/$TEMPLATECONF"
	fi
	if ! (test -d "$TEMPLATECONF"); then
	    echo >&2 "Error: '$TEMPLATECONF' must be a directory containing local.conf & bblayers.conf"
	    return
	fi
    fi
    OECORELAYERCONF="$TEMPLATECONF/bblayers.conf.sample"
    OECORELOCALCONF="$TEMPLATECONF/local.conf.sample"
    OECORESITECONF="$TEMPLATECONF/site.conf.sample"
fi

if [ "x" = "x$OECORELOCALCONF" ]; then
    OECORELOCALCONF="$OEROOT/meta/conf/local.conf.sample"
fi
if ! (test -r "$BUILDDIR/conf/local.conf"); then
cat <<EOM
A new build directory has been created with a conf subdirectory. This 
contains the default configuration for building for altera hardware. 
You can modify the conf/local.conf file to adjust various settings, such 
as building with an initramfs.
EOM
    cp -f $OECORELOCALCONF $BUILDDIR/conf/local.conf
fi

if [ "x" = "x$OECORELAYERCONF" ]; then
    OECORELAYERCONF="$OEROOT/meta/conf/bblayers.conf.sample"
fi
if ! (test -r "$BUILDDIR/conf/bblayers.conf"); then
    # Put the abosolute path to the layers in bblayers.conf so we can run
    # bitbake without the init script after the first run
    sed "s|##COREBASE##|$OEROOT|g" $OECORELAYERCONF > $BUILDDIR/conf/bblayers.conf
fi
if !(test -r "$BUILDDIR/conf/site.conf") && (test -r "$OECORESITECONF"); then
   cp -f $OECORESITECONF $BUILDDIR/conf/site.conf
fi

# Prevent disturbing a new GIT clone in same console
unset OECORELOCALCONF
unset OECORELAYERCONF

# Now try to check for the external toolchain
grep EXTERNAL_TOOLCHAIN $BUILDDIR/conf/site.conf > /dev/null 
if [ $? != 0 ]
then
    # The EXTERNAL_TOOLCHAIN variable doesn't exist, this poky is from rocketboards.org
    echo "Please enter the linaro toolchain installation path. Linaro toolchain version $GCC_VERSION-$GCC_RELEASE is required."
    echo "If the toolchain folder is empty, linaro $GCC_VERSION-$GCC_RELEASE will be downloaded and installed to the path"
    echo "Hit enter to use default directory at $BUILDDIR/linaro-toolchain"
    read TOOLCHAIN_FOLDER

    if [ "x$TOOLCHAIN_FOLDER" == "x" ]; then
        TOOLCHAIN_FOLDER="$BUILDDIR/linaro-toolchain"
    fi

    if [ -d "$TOOLCHAIN_FOLDER" ]; then
        echo "Toolchain folder exists, proceeding without downloading toolchain"
        echo "Checking toolchain version"
	if [ -x $TOOLCHAIN_FOLDER/bin/arm-linux-gnueabihf-gcc ]; then
	        "$TOOLCHAIN_FOLDER"/bin/arm-linux-gnueabihf-gcc --version | grep $GCC_VERSION-$GCC_RELEASE > /dev/null 
		if [ $? -ne 0 ]; then
			echo "Toolchain version not supported. Please rerun \"source altera-init\" and specify a correct Linaro toolchain"
			exit -1
	        else
			echo "Toolchain version match, proceeding"
			echo "TCLIBC = \"external-linaro-toolchain\"" >> $BUILDDIR/conf/site.conf
			echo "TCMODE = \"external-linaro\"" >> $BUILDDIR/conf/site.conf
			echo "EXTERNAL_TOOLCHAIN = \"$TOOLCHAIN_FOLDER\"" >> $BUILDDIR/conf/site.conf
		fi
	else
		echo "Error: No toolchain binary found in the specified path"
		exit -1
        fi
    else
        mkdir -p "$TOOLCHAIN_FOLDER"
        pushd "$TOOLCHAIN_FOLDER"
        echo "Downloading linaro $GCC_VERSION-$GCC_RELEASE toolchain"
	download_toolchain
        tar xjf $GCC_ARCHIVE || (echo "Error: Unable to extract downloaded Linaro toolchain archive" && rm -rf $GCC_BASENAME && exit)
	rm $GCC_ARCHIVE || (echo "Error: Unable to remove Linaro toolchain archive")
        mv $GCC_BASENAME/* . || (echo "Error: Unable to move Linaro toolchain to requested directory" && exit)
        rmdir $GCC_BASENAME || (echo "Error: Unable to temporary Linaro toolchain directory")
        popd
        echo "TCLIBC = \"external-linaro-toolchain\"" >> $BUILDDIR/conf/site.conf
        echo "TCMODE = \"external-linaro\"" >> $BUILDDIR/conf/site.conf
        echo "EXTERNAL_TOOLCHAIN = \"$TOOLCHAIN_FOLDER\"" >> $BUILDDIR/conf/site.conf
    fi
fi

cat <<EOM

### Shell environment set up for builds. ###

You can now run 'bitbake <target>'

Common targets are:
	bitbake virtual/kernel
	bitbake virtual/bootloader
	bitbake altera-gsrd-image
	bitbake altera-image
EOM
